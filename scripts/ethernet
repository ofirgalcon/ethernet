#!/usr/local/munkireport/munkireport-python2
# Author ofirgalcon based on code by tuxudo


## code for v3
# import re

# string = "ethernet_speed_2500"
# result = re.search("\d+", string)
# numeric_part = int(result.group())
# speed = numeric_part / 1000
# formatted_speed = "{:.1f} Gb".format(speed)
# print(formatted_speed)

import re
import subprocess
import os
import plistlib
import sys

sys.path.insert(0, '/usr/local/munki')
sys.path.insert(0, '/usr/local/munkireport')

from munkilib import FoundationPlist

def extract_speed(string):
    result = re.search("\d+", string)
    numeric_part = int(result.group())
    speed = numeric_part / 1000.0
    if speed.is_integer():
        formatted_speed = "%d Gb/s" % int(speed)
    else:
        formatted_speed = "%.1f Gb/s" % speed
    return formatted_speed

def convert_name_speed(speed_string):
    if speed_string == "USB 10/100/1000 LAN":
        return "1 Gb/s"
    elif speed_string == "USB 10/100/1000LAN":
        return "1 Gb/s"
    elif speed_string == "USB 101001000 LAN":
        return "1 Gb/s"
    elif speed_string == "USB 10/100 LAN":
        return "0.1 Gb/s"
    else:
        return ""

def clean_bus_name(bus_string):
    if bus_string == "spethernet_usb_device":
        return "USB"
    elif bus_string == "spethernet_pci_device":
        return "PCI"
    else:
        return bus_string

def convert_vendor_name(vendor_code):
    if vendor_code == "0x8086":
        return "Intel"
    elif vendor_code == "0x14e4":
        return "Broadcom"
    elif vendor_code == "0x1d6a":
        return "Apple Inc."
    elif vendor_code == "0x1022":
        return "AMD"
    elif vendor_code == "0x1002":
        return "ATI (AMD)"
    elif vendor_code == "0x1b21":
        return "ASMedia Technology"
    elif vendor_code == "0x1af4":
        return "Red Hat"
    elif vendor_code == "0x8087":
        return "Intel"
    elif vendor_code == "0x10de":
        return "NVIDIA"
    elif vendor_code == "0x5143":
        return "Qualcomm Atheros"
    elif vendor_code == "0x10ec":
        return "Realtek Semiconductor"
    elif vendor_code == "0x13b5":
        return "Conexant Systems"
    elif vendor_code == "0x1131":
        return "SiS"
    elif vendor_code == "0x168c":
        return "Atheros Communications"
    else:
        return vendor_code


def get_ethernet_info():
    '''Uses system profiler to get Ethernet info for this machine.'''
    cmd = ['/usr/sbin/system_profiler', 'SPEthernetDataType', '-xml']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()

    try:
        plist = plistlib.readPlistFromString(output)
        # system_profiler xml is an array
        sp_dict = plist[0]
        items = sp_dict['_items']
        return items
    except Exception:
        return {}

def flatten_ethernet_info(array, localization):
    '''Un-nest Ethernet devices, return array with objects with relevant keys'''
    out = []
    for obj in array:
        # Return nothing if machine doesn't have Ethernet
        if 'Ethernet' in obj and obj['Ethernet'] == "no_hardware":
            return {}

        device = {}
        for item in obj:
            # Don't process the bus itself
            if item == '_name' and "ethernet_bus" in obj[item]:
                continue  
            elif item == '_items':
                out = out + flatten_ethernet_info(obj['_items'], localization)
                
            elif item == '_name':
                device['name'] = obj[item]
                device['max_link_speed'] = convert_name_speed(obj[item])
            elif item == 'spethernet_device-id':
                device['device_id'] = obj[item]
                if obj[item] == "0x1533":
                    device['max_link_speed'] = "1 Gb/s"
            elif item == 'spethernet_device_type':
                try:
                    device['device_type'] = localization[obj[item]].strip()
                except Exception:
                    device['device_type'] = obj[item]
            elif item == 'spethernet_driver':
                device['driver'] = obj[item]
            elif item == 'spethernet_max_link_speed':
                device['max_link_speed'] = extract_speed(obj[item])
            elif item == 'spethernet_pcie_link-speed':
                device['pcie_link_speed'] = obj[item]
            elif item == 'spethernet_link-speed':
                device['pcie_link_speed'] = obj[item]
            elif item == 'spethernet_pcie_link-width':
                device['pcie_link_width'] = obj[item]
            elif item == 'spethernet_BSD_Device_Name':
                device['BSD_Device_Name'] = obj[item]
            elif item == 'spethernet_BSD_Name':
                device['BSD_Device_Name'] = obj[item]
            elif item == 'spethernet_usb_device_speed':
                device['usb_device_speed'] = obj[item]
            elif item == 'spethernet_revision-id':
                device['revision_id'] = obj[item]
            elif item == 'spethernet_bus':
                device['bus'] = clean_bus_name(obj[item])
            elif item == 'spethernet_subsystem-id':
                device['subsystem_id'] = obj[item]
            elif item == 'spethernet_subsystem-vendor-id':
                device['subsystem_vendor_id'] = obj[item]
            elif item == 'spethernet_vendor-id':
                device['vendor_id'] = obj[item]
                device['vendor_name'] = convert_vendor_name(obj[item])
            elif item == 'spethernet_vendor_name':
                device['vendor_name'] = obj[item]
            elif item == 'spethernet_usb_device_speed':
                device['usb_device_speed'] = obj[item]
            elif item == 'spethernet_mac_address':
                device['mac_address'] = obj[item]
            elif item == 'spusbethernet_mac_address':
                device['mac_address'] = obj[item]
            elif item == 'spethernet_SleepProxyCapable':
                device['mac_address'] = obj[item]
            elif item == 'spethernet_avb_support':
                device['avb_support'] = obj[item]
            elif item == 'spethernet_product-id':
                device['product_id'] = obj[item]

        if device['name'] == "Apple T1 Controller": 
            continue
        elif device['name'] == "Apple T2 Controller": 
            continue
        elif device['name'] == "iBridge": 
            continue
        elif device['name'] == "iPhone": 
            continue
        elif device['name'] == "iPad": 
            continue
        elif device['name'] == "Studio Display": 
            continue
        elif device['name'] == "USB": 
            continue

        elif device['name'] == "Apple AQC107-AFW": 
            device['max_link_speed'] = "10 Gb/s"
        elif device['name'] == "USB 10/100/1000 LAN": 
            device['max_link_speed'] = "1 Gb/s"
        elif device['name'] == "Dell Universal Dock D6000": 
            device['max_link_speed'] = "1 Gb/s"
        elif device['name'] == "AX88179A": 
            device['max_link_speed'] = "1 Gb/s"
        elif device['name'] == "Broadcom 57765-B0": 
            device['max_link_speed'] = "1 Gb/s"
        elif device['name'] == "Broadcom 57766-A1": 
            device['max_link_speed'] = "1 Gb/s"
        elif device['name'] == "Broadcom 57765-A0": 
            device['max_link_speed'] = "1 Gb/s"
        elif device['name'] == "Intel 82574L": 
            device['max_link_speed'] = "1 Gb/s"
        elif device['name'] == "Belkin USB-C LAN": 
            device['max_link_speed'] = "1 Gb/s"
        elif device['name'] == "Broadcom 57762-A0": 
            device['max_link_speed'] = "1 Gb/s"
        elif device['name'] == "ALOGIC CH2 Compact Docking Station": 
            device['max_link_speed'] = "1 Gb/s"

        # Only append device if it has a name
        if 'name' in device:
            out.append(device)
            
    return out

def to_bool(s):
    if s == True or s == 1 or s == "TRUE" or s == "Yes":
        return 1
    else:
        return 0 

def main():
    """Main"""

    # Set the encoding
    reload(sys)
    sys.setdefaultencoding('utf8')

    # Read in English localizations from SystemProfiler
    if os.path.isfile('/System/Library/SystemProfiler/SPEthernetReporter.spreporter/Contents/Resources/en.lproj/Localizable.strings'):
        localization = FoundationPlist.readPlist('/System/Library/SystemProfiler/SPEthernetReporter.spreporter/Contents/Resources/en.lproj/Localizable.strings')
    elif os.path.isfile('/System/Library/SystemProfiler/SPEthernetReporter.spreporter/Contents/Resources/English.lproj/Localizable.strings'):
        localization = FoundationPlist.readPlist('/System/Library/SystemProfiler/SPEthernetReporter.spreporter/Contents/Resources/English.lproj/Localizable.strings')
    else:
        localization = {}

    # Get results
    result = dict()
    info = get_ethernet_info()
    result = flatten_ethernet_info(info, localization)

    # Write ethernet results to cache
    cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
    output_plist = os.path.join(cachedir, 'ethernet.plist')
    plistlib.writePlist(result, output_plist)
#    print plistlib.writePlistToString(result)

if __name__ == "__main__":
    main()
